{"version":3,"sources":["AddTask.js","DisplayTasks.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","state","text","onInputChange","e","setState","target","value","handleSubmit","preventDefault","length","props","addTask","alert","className","onSubmit","this","onChange","placeholder","id","type","name","Component","DisplayTasks","ourTasks","deleteTask","allTasks","map","task","key","description","onClick","App","tasks","onAdd","newTask","Math","random","updatedTaskList","onDelete","newState","filter","elem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4OAuCeA,G,MApCf,2MACIC,MAAQ,CACJC,KAAM,IAFd,EAKIC,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEH,KAAME,EAAEE,OAAOC,SANvC,EAQIC,aAAe,SAACJ,GACZA,EAAEK,iBAC6B,IAA3B,EAAKR,MAAMC,KAAKQ,QAChB,EAAKC,MAAMC,QAAQ,EAAKX,MAAMC,MAC9B,EAAKG,SAAS,CAAEH,KAAM,MAGtBW,MAAM,sBAflB,wEAmBQ,OACI,yBAAKC,UAAU,OACX,0BAAMC,SAAUC,KAAKR,aAAcM,UAAU,0BACzC,yBAAKA,UAAU,sBACX,2BAAOG,SAAUD,KAAKb,cAAee,YAAY,aAAaC,GAAG,YAAYC,KAAK,OAAOb,MAAOS,KAAKf,MAAMC,KAAMY,UAAU,cAE/H,yBAAKA,UAAU,WACX,4BAAQA,UAAU,+BAA+BM,KAAK,SAASC,KAAK,UAApE,SACA,uBAAGP,UAAU,wBAAb,gBA3BxB,GAA6BQ,cCuBdC,EAxBM,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAExBC,EAAWF,EAASd,OACtBc,EAASG,KAAI,SAACC,GACV,OACI,yBAAKd,UAAU,qCAAqCe,IAAKD,EAAKT,IAC1D,uBAAGL,UAAU,sBAAsBc,EAAKE,aACxC,4BAAQC,QAAS,WAAMN,EAAWG,EAAKT,KAAOC,KAAK,SAASN,UAAU,8DAClE,uBAAGA,UAAU,kBAAb,eAOZ,uBAAGA,UAAU,UAAb,2BAER,OACI,yBAAKA,UAAU,cACVY,ICgBEM,EA/Bf,2MACE/B,MAAQ,CACNgC,MAAO,CACL,CAAEd,GAAI,EAAGW,YAAa,eACtB,CAAEX,GAAI,EAAGW,YAAa,gBAJ5B,EAOEI,MAAQ,SAACN,GACP,IAAIO,EAAU,CAAEhB,GAAIiB,KAAKC,SAAUP,YAAaF,GAC5CU,EAAe,sBAAO,EAAKrC,MAAMgC,OAAlB,CAAyBE,IAC5C,EAAK9B,SAAS,CACZ4B,MAAOK,KAXb,EAcEC,SAAW,SAACpB,GACV,IAAIqB,EAAW,EAAKvC,MAAMgC,MAAMQ,QAAO,SAACC,GACtC,OAAQA,EAAKvB,KAAOA,KAEtB,EAAKd,SAAS,CAAE4B,MAAOO,KAlB3B,wEAqBI,OACE,yBAAK1B,UAAU,0BACb,yCACA,kBAAC,EAAD,CAASF,QAASI,KAAKkB,QACvB,kBAAC,EAAD,CAAcV,SAAUR,KAAKf,MAAMgC,MAAOR,WAAYT,KAAKuB,gBAzBnE,GAAyBjB,aCMnBqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzD,QACfmD,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,YAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,YAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCtC/BE,I","file":"static/js/main.f4ebcb60.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nexport class AddTask extends Component {\n    state = {\n        text: \"\",\n    };\n\n    onInputChange = (e) => {\n        this.setState({ text: e.target.value })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.text.length !== 0) {\n            this.props.addTask(this.state.text);\n            this.setState({ text: \"\" });\n        }\n        else {\n            alert(\"Enter task first!\");\n        }\n    }\n    render() {\n        return (\n            <div className=\"row\">\n                <form onSubmit={this.handleSubmit} className=\"valign-wrapper col s12\">\n                    <div className=\"input-field col s8\">\n                        <input onChange={this.onInputChange} placeholder=\"Input task\" id=\"taskInput\" type=\"text\" value={this.state.text} className=\"validate\" />\n                    </div>\n                    <div className=\" col s4\">\n                        <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Submit\n                        <i className=\"material-icons right\">send</i>\n                        </button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n};\n\nexport default AddTask;","import React from 'react'\n\nconst DisplayTasks = ({ ourTasks, deleteTask }) => {\n\n    const allTasks = ourTasks.length ? (\n        ourTasks.map((task) => {\n            return (\n                <div className=\"collection-item row valign-wrapper\" key={task.id}>\n                    <p className=\"col s10 left-align\">{task.description}</p>\n                    <button onClick={() =>{deleteTask(task.id)} } type=\"button\" className=\"btn-floating btn-large waves-effect waves-light red cos s2\">\n                        <i className=\"material-icons\">delete</i>\n                    </button>\n                </div>\n            )\n        })\n    ) :\n        (\n            <p className=\"center\">No tasks at this moment</p>\n        );\n    return (\n        <div className=\"collection\">\n            {allTasks}\n        </div>\n    );\n}\n\nexport default DisplayTasks;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport DisplayTasks from './DisplayTasks';\n\n\nexport class App extends Component {\n  state = {\n    tasks: [\n      { id: 1, description: \"Wash dishes\" },\n      { id: 2, description: \"Do laundry\" }\n    ]\n  }\n  onAdd = (task) => {\n    let newTask = { id: Math.random(), description: task };\n    let updatedTaskList = [...this.state.tasks, newTask];\n    this.setState({\n      tasks: updatedTaskList,\n    })\n  };\n  onDelete = (id) => {\n    let newState = this.state.tasks.filter((elem) => {\n      return (elem.id !== id);\n    });\n    this.setState({ tasks: newState, });\n  };\n  render() {\n    return (\n      <div className=\"container center-align\">\n        <h1>Todo List</h1>\n        <AddTask addTask={this.onAdd} />\n        <DisplayTasks ourTasks={this.state.tasks} deleteTask={this.onDelete} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}